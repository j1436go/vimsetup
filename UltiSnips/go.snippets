priority 10

snippet new "Scaffolds an new main file for a package." b
package ${1:main}

import (
	"${2:fmt}"
)

func main() {
	${3}
}
endsnippet

snippet meth "Function snippet" b
func (${1:recv} ${2:T}) ${3:Name} {
	${4:Body}
}
endsnippet

snippet type  "Struct declaration" b
type ${1:type} struct {
	${2:Field}
}
endsnippet

snippet servemeth "http.Handler interface func" b
func (${1:h}) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	rw.Write(${2:data})
}
endsnippet

snippet err "Error check and return"
if err != nil {
	${1:return err}
}
$2
endsnippet

snippet statichandler "Serve static files with Gorilla mux"
http.Handle("${1:Path}", http.StripPrefix("$1", http.FileServer(http.Dir("$2"))))
endsnippet

snippet http_fileserver "HTTP file server"
package main

import (
	"net/http"
)

func main() {
	http.Handle("/", http.FileServer(http.Dir(".")))
	panic(http.ListenAndServe(":9999", nil))
}
endsnippet

snippet for "Index-based for loop"
for _, v := range ${1} {
	${2}
}
endsnippet

snippet handler "An http handler"
func $1(w http.ResponseWriter, r *http.Request) {
	$2
}
endsnippet

snippet db_all "Return all records" ms
func (s *Store) All$1s() ([]*model.${1:Name}, error) {
	var `!p
single_lower = t[1][:1].lower()
snip.rv = single_lower` *model.$1
	`!p
lower = t[1].lower()
snip.rv = lower`s := make([]*model.$1, 0)

	rows, err := s.db.Query(\`
		SELECT ${2:comma separated columns} from `!p snip.rv = lower`s
	\`)
	if err != nil {
		return `!p snip.rv = lower`s, err
	}
	defer rows.Close()

	for rows.Next() {
		`!p snip.rv = single_lower`  = new(model.$1)
		err = rows.Scan(`!p
spl = t[2].replace(" ", "").split(",")
snip.rv = ', '.join(map(lambda s: ''.join(['&', single_lower, '.', s.capitalize()]), spl))
`)
		if err != nil {
			log.Println(err)
		} else {
			`!p snip.rv = lower`s = append(`!p snip.rv = lower`s, `!p snip.rv = single_lower`)
		}
	}
	return `!p snip.rv = lower`s, err
}
endsnippet

snippet db_delete "Remove a record by id"
func (s *Store) Delete${1:Name}ById(db *sql.DB, id int64) (error) {
	if id == 0 {
		return nil, fmt.Errorf("no valid id supplied: %v", id)
	}

	_, err = s.db.Exec(\`
		DELETE FROM `!p snip.rv = t[1].lower()`s WHERE id = ?
	\`, id)

	return err
}
endsnippet

snippet db_all_by_key "Retrieve models where key matches val"
	// NOT YET IMPLEMENTED
func (s *Store) $1sBy(key string, val interface{}) ([]*model.${1:Name}, []error) {
	var `!p
single_lower = t[1][:1].lower()
snip.rv = single_lower` *model.$1

	`!p snip.rv = t[1].lower()`s := make([]*model.$1s, 0)

	errors := make([]error, 0)

	rows, err := s.db.Query(`
		SELECT id, username, password FROM users WHERE `+key+` = ?
	`, val)
	if err != nil {
		return users, errors
	}
	defer rows.Close()

	for rows.Next() {
		u = new(model.User)
		err = rows.Scan(&u.Id, &u.Username, &u.Password)
		if err != nil {
			errors = append(errors, err)
		}
	}

	return users, errors
}
endsnippet
